name: CI/CD Pipeline

on:
  push:
    branches: [master, release]
  pull_request:
    branches: [master, release]
    types: [opened, synchronize]
  

jobs:
  test: 
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: "santa"
          POSTGRES_USER: "santa"
          POSTGRES_PASSWORD: "password"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with: 
          node-version: '14.x'
      # Install, lint and test backend
      - name: install backend
        run: CI=true npm install --prefix server
      - name: lint backend
        run: npm run lint --prefix server
      - name: test backend
        run: npm test --prefix server
        env:
          DATABASE_URL: "postgres://santa:password@localhost:5432/santa"
          NODE_ENV: "test"
          SECRET: "token-sign-secret-for-tests"
      # Install, lint and test frontend
      - name: install frontend
        run: npm install --prefix client
      - name: lint frontend
        run: npm run lint --prefix client
      - name: test frontend
        run: npm test --prefix client
      # Install, lint and run e2e tests
      - name: install e2e
        run: npm install --prefix e2e
      - name: lint e2e
        run: npm run lint --prefix e2e
      - name: prepare e2e for tests
        run: |
          cat << EOF > e2e/.env
          CYPRESS_WEB_BASE='http://localhost:3002'
          EOF
      - name: prepare backend for e2e-tests
        run: |
          cat << EOF > server/.env
          PORT=3002
          DATABASE_URL=postgres://santa:password@localhost:5432/santa
          NODE_ENV=test
          SECRET=token-sign-secret-for-tests
          EOF
      - name: prepare frontend for building
        run: |
          cat << EOF > client/.env
          REACT_APP_API_BASE=/api
          EOF
      - name: build frontend
        run: | 
          npm run build --prefix client
      - name: e2e tests
        uses: cypress-io/github-action@v2
        with:
          command: npm run e2e
          start: npm run dev --prefix ../server
          wait-on: http://localhost:3002
          working-directory: ./e2e

  deploy-heroku:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12
        with: 
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "glacial-shore-58496"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          branch: "release"
          usedocker: true
          delay: 15
          healthcheck: "https://glacial-shore-58496.herokuapp.com/api/version/health"
          checkstring: "OK!"
          rollbackonhealthcheckfailed: true

  deploy-prod:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-20.04
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - name: Set date for tagging
        run: |
          echo "TAG_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
      - name: login to docker
        env: 
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: build image
        env: 
          TAG_NAME: ${{ secrets.DOCKER_USER }}/santas_own_crm:${{ env.TAG_DATE }}
        run: |
          docker build . --file prod.Dockerfile --tag $TAG_NAME
      - name: push to docker
        env: 
          TAG_NAME: ${{ secrets.DOCKER_USER }}/santas_own_crm:${{ env.TAG_DATE }}
        run: docker push $TAG_NAME
